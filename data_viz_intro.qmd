---
title: "data_viz_intro"
author: "zachyloo"
format: html
editor: visual
---

```{r}
pacman::p_load("tidyverse", "here", "janitor", "patchwork", "ggrepel", "gghighlight", "paletteer", "ggExtra", "ggbeeswarm", "gapminder", "sf")
```

# ggpplot basics
```{r}
lizards <- read_csv(here::here("data_tidy", "lizards.csv"))
```

## Essentials
1. data 2. aesthetics 3. geom
```{r}
# 3 ways
# firstly, aes in ggplot function
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point()
# second, aes in geom function
ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight))
# third, everything in geom function
ggplot() + 
  geom_point(data = lizards, aes(x = total_length, y = weight))
```

## Swap geoms
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_line()
# histograms need only one axis
ggplot(lizards, aes(x = total_length)) +
  geom_histogram()
```

geom_jitter() usually best with one categorical and one continuous var
```{r}
ggplot(lizards, aes(x = weight, y = common_name)) +
  geom_jitter()
```

## Aesthetic Mapping
### Based on constant value 
Don't even need to use `aes()` function
```{r}
ggplot(lizards, aes(x = weight)) +
  geom_histogram(color = "magenta",
                 fill = "purple",
                 alpha = 0.3,
                 linetype = "dashed")
```

### Based on variables
```{r}
ggplot(lizards, aes(total_length, weight)) +
  geom_point(aes(color = common_name), alpha = 0.5)
```

## Themes/Axis Labels
```{r}
ggplot(lizards, aes(weight, site)) +
  geom_jitter(aes(color = common_name)) +
  labs(x = "Weight (g)",
       y = "Study Site", 
       title = "Lizard Weights Across Sites at Jornada",
       color = "Species") +
  theme_light()
```

## Reorder data
```{r}
lizard_counts <- lizards |> 
  count(common_name)

ggplot(lizard_counts, aes(n, fct_reorder(common_name, n))) +
  geom_col()
```

## Advanced customization
```{r}
ggplot(lizards, aes(total_length, weight)) +
  geom_point() + 
  scale_x_continuous(breaks = c(0, 250, 500), 
                     limits = c(0, 500)) + 
  scale_y_continuous(breaks = seq(from = 0, to = 70, by = 10), 
                     limits = c(0, 70)) +
  scale_x_log10()
```

```{r}
# counting lizards caught per day
lizard_daily <- lizards |> 
  mutate(date = lubridate::mdy(date)) |> 
  count(date)

# plot
ggplot(lizard_daily, aes(x = date, y = n)) + 
  geom_line() +
  scale_x_date(breaks = scales::breaks_width("2 years"),
               labels = scales::label_date("'%y"))
```

### Modifying aes with scale_()
```{r}
# color gradient with 2 colors
ggplot(lizards, aes(total_length, weight)) + 
  geom_point(aes(color = weight)) +
  scale_color_gradient(low = "magenta", high = "black")
# color gradient with 2+ colors
ggplot(lizards, aes(total_length, weight)) + 
  geom_point(aes(color = weight)) +
  scale_color_gradientn(colors = c("orange", "yellow", "black"))
# color gradient of bins
ggplot(lizards, aes(total_length, weight)) + 
  geom_point(aes(color = weight)) +
scale_color_steps(low = "red", high = "purple", breaks = seq(0, 80, by = 5)) 

```

### Discrete variables
```{r}
ggplot(lizards, aes(common_name, total_length)) + 
  geom_boxplot(aes(fill = common_name),
               show.legend = FALSE) + 
  coord_flip()
```

```{r}
lizards_mean <- lizards |> 
  mutate(common_name = fct_reorder(common_name, total_length, .fun = mean))
ggplot(lizards, aes(common_name, total_length)) + 
  geom_boxplot(aes(fill = common_name), 
               show.legend = FALSE) + 
  coord_flip() +
  scale_fill_paletteer_d(palette = "ggsci::default_gsea") +
  theme_light()
```

### Gridlines/Panel Colors

### Patchwork
```{r}
p1 <- ggplot(lizards, aes(common_name, total_length)) + 
  geom_boxplot(aes(fill = common_name), 
               show.legend = FALSE) + 
  coord_flip() +
  scale_fill_paletteer_d(palette = "ggsci::default_gsea") +
  theme_light()

p2 <- ggplot(lizards, aes(total_length, weight)) + 
  geom_point(aes(color = weight)) +
scale_color_steps(low = "red", high = "purple", breaks = seq(0, 80, by = 5))

(p1 | p2) & theme_light()
p1 / p2

```

